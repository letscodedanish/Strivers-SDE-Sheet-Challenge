#include <bits/stdc++.h>

int LongestSubsetWithZeroSum(vector < int > arr) {

  int n=arr.size();
  //Brute Force Approch
  //Generate all the sub arrays and compare
  // int len=0;
  // for(int i=0;i<n;i++){
  //     int sum=0;
  //   for(int j=i;j<n;j++){
  //     sum += arr[j];
  //     if(sum==0){
  //       len=max(len,j-i+1);
  //     }
  //   }
  // }
  // return len;

  //Better Approch using hashing
  // map<int,int> preSumMap;
  // int sum=0;
  // int maxLen=0;

  // for(int i=0;i<n;i++){
  //   sum += arr[i];
  //   if(sum==0){
  //     maxLen=max(maxLen,i+1);
  //   }
  //   int rem=sum-0;
  //   if(preSumMap.find(rem) != preSumMap.end()){
  //     int len= i - preSumMap[rem];
  //     maxLen=max(maxLen,len);
  //   }
  //   if(preSumMap.find(sum)==preSumMap.end()){
  //     preSumMap[sum]=i;
  //   }
  // }
  // return maxLen;

  //Optimal Approch using left, right pointer
  int k=0;
  int maxLen=0;
  int left=0,right=0;
  int sum=arr[0];

  while(right < n){
    while(left <= right && sum > k){
      sum -= arr[left];
      left++;
    }
    if(sum == k){
      maxLen=max(maxLen,right-left+1);
    }
    right++;
    if(right < n) sum += arr[right];
  }

  return maxLen;
}
